# --- Single-Stage Build Environment ---
# Use the official Ubuntu 22.04 image as the base.
FROM ubuntu:22.04

#I am running in a non-interactive mode. Do not ask me any questions during installations; just use the default answers for everything."
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install all dependencies for both building and running:
# curl (for NodeSource), Node.js (for building), and Nginx (for serving).
RUN apt-get update && \
    apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y nodejs nginx --no-install-recommends

# Set the working directory for the build process.
WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker's cache.
COPY package*.json ./

# Install project dependencies.
RUN npm install

# Copy the rest of the application source code.
COPY . .

# Build the React app for production. This creates a 'build' folder inside /app.
RUN npm run build

# This command moves our finished React app from its build folder to the public-facing folder that Nginx uses.

RUN cp -r /app/build/* /var/www/html/
# We are replacing Nginx's generic rulebook with our own custom one, so the "waiter" knows how to handle our specific React app correctly (especially for routing).

COPY nginx.conf /etc/nginx/sites-available/default

# Expose port 80 to allow traffic to the Nginx server.
EXPOSE 80

# The command to start the Nginx server when the container launches.
# 'daemon off;' "Stay in the foreground. Don't go to the background." By running in the foreground, Nginx becomes the life of the container, and as long as it's running, the container stays alive.
CMD ["nginx", "-g", "daemon off;"]
