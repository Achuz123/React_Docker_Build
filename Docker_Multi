# --- Stage 1: The Build Environment ---
# Use the official Ubuntu 22.04 image as the base to build our app.
# We use Ubuntu here because it's what we've been working with.
FROM ubuntu:22.04 as build-stage

# Set environment variables to allow non-interactive installation of packages.
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install Node.js, npm, and curl (needed for NodeSource setup).
RUN apt-get update && \
    apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y nodejs

# Set the working directory inside the container.
WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker's cache.
COPY package*.json ./

# Install project dependencies using npm.
RUN npm install

# Copy the rest of the application source code into the container.
COPY . .

# Build the React app for production. This creates a 'build' folder.
RUN npm run build


# --- Stage 2: The Production Environment ---
# Start a new, clean stage from the official, lightweight Nginx image.
# 'stable-alpine' is very small and optimized for serving content.
FROM nginx:stable-alpine

# Copy the optimized build files from the 'build-stage' to the default Nginx web root.
# The default web root for the official nginx image is /usr/share/nginx/html.
COPY --from=build-stage /app/build /usr/share/nginx/html

# Copy our custom Nginx configuration file to overwrite the default one.
# The default config location for this image is /etc/nginx/conf.d/default.conf.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 to document that the container listens on this port.
EXPOSE 80

# The command to start the Nginx server when the container launches.
# This is the default command for the nginx image, but we include it for clarity.
CMD ["nginx", "-g", "daemon off;"]
